/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    bool areIdentical(TreeNode* root1, TreeNode* root2)
    {
        if(root1 == NULL && root2 == NULL)
          return true;
        if(root1 == NULL || root2 == NULL)
          return false;
        return (root1 -> val == root2 -> val && 
                areIdentical(root1 -> right, root2 -> right) && 
                areIdentical(root1 -> left, root2 -> left));
    }
    
    bool isSubtree(TreeNode* T, TreeNode* S) 
    {
        if(S == NULL)
          return true;
        if(T == NULL)
          return false;
        
        if(areIdentical(T, S))
          return true;
          
        return (isSubtree(T -> left, S) || isSubtree(T -> right, S)) ; 
    }
};
