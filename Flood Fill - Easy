class Solution {
public:
    vector<vector<int>> floodFill(vector<vector<int>>& image, int sr, int sc, int newColor) {
        int n = image.size();
        int m = image[0].size();
        
        int color = image[sr][sc];
        
        image[sr][sc] = newColor;
        
        DFS(image, sr + 1, sc, n, m, color, newColor);
        DFS(image, sr - 1, sc, n, m, color, newColor);
        DFS(image, sr, sc + 1, n, m, color, newColor);
        DFS(image, sr, sc - 1, n, m, color, newColor);
        
        return image;
    }
    
    void DFS(vector<vector<int>>& image, int i, int j, int n, int m, int color, int newColor)
    {
        if (i < 0 || j < 0 || i > (n - 1) || j > (m - 1) || image[i][j] != color || image[i][j]==newColor)
        {
            return;
        }
        if (image[i][j] == color)
        {
            image[i][j] = newColor;
            DFS(image, i + 1, j, n, m, color, newColor);
            DFS(image, i - 1, j, n, m, color, newColor);
            DFS(image, i, j + 1, n, m, color, newColor);
            DFS(image, i, j - 1, n, m, color, newColor);
        }
    }
    
};
