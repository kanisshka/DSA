/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode *buildTree(vector<int> &preorder, vector<int> &inorder) {
        return buildTree(preorder.data(), inorder.data(), inorder.size());
    }

private:
    TreeNode *buildTree(int *preorder, int *inorder, int size) {
        if (NULL == preorder || NULL == inorder || size <= 0) return NULL;

        TreeNode *root = new TreeNode(preorder[0]);
        if (size == 1)  //recursion terminate, trace back
            return root;

        int rootIndex = 0;  //search the root index in inorder
        for (; rootIndex < size; rootIndex++)
            if (inorder[rootIndex] == root->val) break;

        root->left = buildTree(&preorder[1], inorder, rootIndex);
        root->right = buildTree(&preorder[rootIndex + 1], &inorder[rootIndex + 1], size - rootIndex - 1);

        return root;
    }
};
